name: Main workflow

on:
  push:
    branches:
      - main
      - 'releases/**'
      - 'dev/**'
  pull_request:
    branches:
      - main

jobs:

  lint-flake:
    name: Lint with flake8
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[build]') || contains(github.ref_name, 'main') || contains(github.ref_name, 'releases')

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: actions/cache@v3
        id: python-cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements-dev.txt') }}
      - if: steps.python-cache.outputs.cache-hit != 'true'
        run: pip install -r requirements-dev.txt

      - run: flake8 src

  prepare-data:
    name: Prepare data (pull, process)
    runs-on: ubuntu-latest
    needs: lint-flake

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: actions/cache@v3
        id: python-cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements-dev.txt') }}
      - if: steps.python-cache.outputs.cache-hit != 'true'
        run: pip install -r requirements.txt
      - uses: actions/cache@v3
        id: huggingface-cache
        with:
          path: ~/.cache/huggingface
          key: huggingface-cache

      - run: |
          python src/pull_data.py
          python src/process_data.py

      - uses: actions/upload-artifact@v3
        with:
          name: huggingface-data
          path: data

  pre-train-model:
    name: Pre-train model
    runs-on: ubuntu-latest
    needs: prepare-data

    strategy:
      matrix:
        model_name: ['distilbert', 'albert']

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: actions/cache@v3
        id: python-cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements-dev.txt') }}
      - uses: actions/cache@v3
        id: huggingface-cache
        with:
          path: ~/.cache/huggingface
          key: huggingface-cache
      - uses: actions/download-artifact@v3
        with:
          name: huggingface-data
          path: data

      - name: Login Hugging Face
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
        run: |
          huggingface-cli login --token $HUGGINGFACE_TOKEN

      - name: Pre-training distilbert
        run: |
#          python src/evaluate_model.py -in 'aalksii/distilbert-base-uncased-ml-arxiv-papers' -out './models/metrics.csv'
#          python src/train_model.py -in 'aalksii/distilbert-base-uncased-ml-arxiv-papers' -out './models/distilbert-base-uncased-ml-arxiv-papers'
          python src/evaluate_model.py -in 'distilbert-base-uncased' -out './models/metrics.csv'
          python src/train_model.py -in 'distilbert-base-uncased' -out './models/distilbert-base-uncased-ml-arxiv-papers'
          python src/evaluate_model.py -in './models/distilbert-base-uncased-ml-arxiv-papers' -out './models/metrics.csv'
        if: matrix.model_name == 'distilbert'

      - name: Pre-training albert
        run: |
#          python src/evaluate_model.py -in 'aalksii/albert-base-v2-ml-arxiv-papers' -out './models/metrics.csv'
#          python src/train_model.py -in 'aalksii/albert-base-v2-ml-arxiv-papers' -out './models/albert-base-v2-ml-arxiv-papers'
          python src/evaluate_model.py -in 'albert-base-v2' -out './models/metrics.csv'
          python src/train_model.py -in 'albert-base-v2' -out './models/albert-base-v2-ml-arxiv-papers'
          python src/evaluate_model.py -in './models/albert-base-v2-ml-arxiv-papers' -out './models/metrics.csv'
        if: matrix.model_name == 'albert'

      - uses: actions/upload-artifact@v3
        id: upload-huggingface-models
        with:
          name: huggingface-models-${{ matrix.model_name }}
          path: models

  fine-tune-model:
    name: Fine-tune model
    runs-on: ubuntu-latest
    needs: pre-train-model

    strategy:
      matrix:
        model_name: ['distilbert', 'albert']

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: actions/cache@v3
        id: python-cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements-dev.txt') }}
      - uses: actions/cache@v3
        id: huggingface-cache
        with:
          path: ~/.cache/huggingface
          key: huggingface-cache
      - uses: actions/download-artifact@v3
        with:
          name: huggingface-data
          path: data
      - uses: actions/download-artifact@v3
        with:
          name: huggingface-models-${{ matrix.model_name }}
          path: models
#        if: steps.upload-huggingface-models.outputs.exists

      - name: Login Hugging Face
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
        run: |
          huggingface-cli login --token $HUGGINGFACE_TOKEN

      - name: Fine-tuning distilbert
        run: |
          python src/train_model.py -in './models/distilbert-base-uncased-ml-arxiv-papers' -out './models/distilbert-base-uncased-ml-arxiv-papers-finetuned'
          python src/evaluate_model.py -in './models/distilbert-base-uncased-ml-arxiv-papers-finetuned' -out './models/metrics.csv'
        if: matrix.model_name == 'distilbert'

      - name: Fine-tuning albert
        run: |
          python src/train_model.py -in './models/albert-base-v2-ml-arxiv-papers' -out './models/albert-base-v2-ml-arxiv-papers-finetuned'
          python src/evaluate_model.py -in './models/albert-base-v2-ml-arxiv-papers-finetuned' -out './models/metrics.csv'
        if: matrix.model_name == 'albert'

      - uses: actions/upload-artifact@v3
        id: upload-huggingface-models
        with:
          name: huggingface-models-${{ matrix.model_name }}
          path: models

#      - name: push model
#        env:
#          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
#        run: |
#          huggingface-cli login --token $HUGGINGFACE_TOKEN

  select-model:
    name: Select best model
    runs-on: ubuntu-latest
    needs: fine-tune-model

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: actions/cache@v3
        id: python-cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements-dev.txt') }}
      - uses: actions/cache@v3
        id: huggingface-cache
        with:
          path: ~/.cache/huggingface
          key: huggingface-cache
      - uses: actions/download-artifact@v3
        with:
          name: huggingface-data
          path: data

      - uses: actions/download-artifact@v3
        with:
          name: huggingface-models-distilbert
          path: models-distilbert
      - uses: actions/download-artifact@v3
        with:
          name: huggingface-models-albert
          path: models-albert

      - name: Select the best model
        run: |
          python src/select_model.py -in './models-distilbert/metrics.csv' -in './models-albert/metrics.csv' -out './models/best_model_name.txt'

      - name: Save the best model as an artifact
        uses: actions/upload-artifact@v3
        id: upload-huggingface-best-model
        with:
          name: huggingface-best-model
          path: models

  optimize-model:
    name: Optimize model
    runs-on: ubuntu-latest
    needs: select-model

    steps:
      - run: echo 'Optimizing...'
        if: false

  deploy:
    name: Deploy model
    runs-on: ubuntu-latest
    needs: optimize-model

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push the release to production branch
        run: |
          echo 'Deploying...'

          git config user.name github-actions
          git config user.email github-actions@github.com

          git push --force origin ${{ github.ref_name }}:prod

#          // Write a name of the best model to a config file:
#          git checkout prod
#          echo 'run_id: ${{ github.run_id }}' > run_id.txt
#          git add .
#          git commit -m 'Release for run_id: ${{ github.run_id }} from ${{ github.ref_name }}'
#          git push origin prod
#          // And move this model name next to deploy server

  run-server:
    name: Run REST API
#    runs-on: self-hosted
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: actions/cache@v3
        id: python-cache
        with:
          path: ${{ github.workspace }}
          key: ${{ github.workspace }}-${{ hashFiles('requirements-dev.txt') }}
      - if: steps.python-cache.outputs.cache-hit != 'true'
        run: pip install -r requirements-dev.txt

      - if: steps.upload-huggingface-best-model.outputs.cache-hit != 'true'
        name: Load the best model as an artifact
        uses: actions/download-artifact@v3
        with:
          name: huggingface-best-model
          path: models

      - name: Deploy model
        run: |
          python src/server.py
